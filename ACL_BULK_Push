import os, re
from netmiko import ConnectHandler

# File location for the list of IP adders
AP_List = open("/home/ubuntu/Desktop/ap_ip_list.txt")
# Tries SSH,Telnet and if both fail prints unable to connect.
for IP in AP_List:
    try:
        ssh = {
            'device_type': 'cisco_ios',
            'ip': IP,
            'username': 'NEGAdmin',
            'password': 'Chan8eHappens!',
        }
        net_connect = ConnectHandler(**ssh)
        print("ssh Connection established to Node " + IP)
    except:
        try:
            telnet = {
                'device_type': 'cisco_ios_telnet',
                'ip': IP,
                'username': 'NEGAdmin',
                'password': 'Chan8eHappens!',
            }
            net_connect = ConnectHandler(**telnet)
            print("Telnet Connection established to Node " + IP)
        except:
            print("unable to connect Node " + IP)
            continue
        # sends int br to the AP
    run_cmd = net_connect.send_command("show run | sec vty")
    # saves the above output to a file
    print(run_cmd, file=open("/home/ubuntu/Desktop/output.txt", "w"))
    # Opens the file locally and looks for name reset
    r_output = open("/home/ubuntu/Desktop/output.txt", "r")
    rl_output = r_output.readlines()
    rl_output_str = ''.join(rl_output)  # convert list to string
    match = re.search(r'access-class\s+(\S+)', rl_output_str)
    print(match)
    if match == None:
        print("No Access list attached to VTY line on the Node "+IP)
    else:
        access_class_name = match.group(1)
    # shows the line it is seeing on the device
        print(access_class_name)

        run_cmd2 = net_connect.send_command('show ip access-list ' + access_class_name)

        print(run_cmd2, file=open("/home/ubuntu/Desktop/output_ACL.txt", "w"))

        r_ACLoutput = open("/home/ubuntu/Desktop/output_ACL.txt", "r")

        rl_ACLoutput = r_ACLoutput.read()

        rl_ACLoutput_str = ''.join(rl_ACLoutput)

        findacl = rl_ACLoutput_str.find("IP")

        if findacl != -1:
            find_acl_type = rl_ACLoutput[:findacl].strip()
            print(find_acl_type)
        else:
            print("IP not found in text.")

        Extacl_rule = ['permit tcp 172.23.192.0 0.0.63.255 eq 22']

        Staacl_rule = ['permit 172.23.192.0 0.0.63.255']
        # if it does not find reset it will move-on to next ap and if it does it will reboot the ap.
        if find_acl_type == ("Extended"):
            print("Node " + IP + "is using Extended ALC")
            ACL_commands = ['ip access-list extended ' + access_class_name] + Extacl_rule
            net_connect.send_config_set(ACL_commands)
            net_connect.send_command("wr", expect_string="[confirm]")
            net_connect.disconnect()
        else:
            if find_acl_type == ("Standard"):
                print("Node " + IP + "is using Standard ALC")
                ACL_commands = ['ip access-list standard ' + access_class_name] + Staacl_rule
                net_connect.send_config_set(ACL_commands)
                net_connect.send_command("wr", expect_string="[confirm]")
                net_connect.disconnect()
